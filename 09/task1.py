# -*- coding: utf-8 -*-
"""Marina_task.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AodgLYj_0dLg5aHQf4JxmxEr-NSx_deY

##SEATS BOOKING SIMULATOR*

In this project, you will create an application that helps to book seats in a cinema theatre: check available seats and record customers. For simplicity, assume that there is only 1 film in the schedule (yeah, that's sad). The schedule (when film screening starts) is 10:00, 15:00, 20:00. Also there is 1 room with 10 seats.

The application should:
– Have a console menu with options: book tickets, display the current state of the seating arrangement for each time slot, and exit.
– Display the seating arrangement (for the chosen time slot) by printing it to the console: show the number of the seat and mark free seats with "_", occupied seats with "x". 
– Receive an order for booking a ticket: ask for customer's name, surname, and save the information about the booking. 
– Display the ticket price.
– Set the ticket price. 

Assume that records about booking for the day are refreshed automatically the next day (you don't need to implement it).
"""

class seat_simulator():
  def __init__(self, total_seats=10, ticket_price=40):
    self.total_seats = total_seats
    self.booked_seats = [[0]*self.total_seats]*3
    self.custs = []
    self.film = "Spiderman"
    self.schedule = [10,15,20]
    self.ticket_price = ticket_price
  
  def book_tickets(self, seat_number, time):
    # time_idx = self.schedule[time]
    if seat_number > 10 or seat_number < 0:
      print("Seat not available")
      return 0
    if self.booked_seats[time][seat_number] != 0:
      print("Can't book, it's already booked")
      return 0
    else:
      self.booked_seats[time][seat_number] = 1
      print("successful booking")
      return 1
  
  def seat_arragements(self):
    print("Seats are available below")
    for id, j in enumerate(self.schedule):
      schedule = j  
      for idx, i in enumerate(self.booked_seats[id]):
        disp_str = "Time "+str(schedule)+":00 Seat#"+str(idx)
        if i == 0:
          print(disp_str, "_")
        else:
          print(disp_str, "x")
  
  def book_order(self, cus_name, cus_sur):
    self.custs.append([cus_name, cus_sur])
  
  def set_ticket_price(self, ticket_price):
    self.ticket_price = ticket_price
  
  def disp_ticket_price(self):
    print(self.ticket_price)

  def colsole_menu(self):
    print("Please input number for performing operation")
    print("1- Book tickets")
    print("2- Display the seating arrangement")
    print("3- Order_booking")
    print("4- Display ticket price")
    print("5- Set ticket price")
    val = int(input())
    if val == 1:
      print("Select Time")
      for id, j in enumerate(self.schedule):
        st = str(id+1)+"-"+str(j)+":00"
        print(st)
      time = int(input())
      print("Enter seat number 0-9")
      seat = int(input())
      self.book_tickets(seat_number=seat, time=time)
    elif val == 2:
      self.seat_arragements()
    elif val == 3:
      print("Enter first name")
      f_name = input()
      print("Enter sur name")
      l_name = input()
      self.book_order(cus_name=f_name, cus_sur=l_name)
    elif val == 4:
      self.disp_ticket_price()
    elif val == 5:
      print('Enter ticket price')
      price = int(input())
      self.set_ticket_price(price)
    else:
      print("Wrong input")

obj = seat_simulator()

obj.colsole_menu()